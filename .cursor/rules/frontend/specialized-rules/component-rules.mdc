---
description: Vue 3 component standards with design system enforcement
globs: **/*.vue
alwaysApply: false
---

# Component Rules

## Mandatory Component Structure

### Script Setup Pattern
All Vue components MUST use Composition API with script setup:

```vue
<template>
  <div class="main-container">
    <BButton @click="handleClick">{{ t('buttons.save') }}</BButton>
  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'
import { useI18n } from 'vue-i18n'
import { BButton } from '@BRIUS/design-system'

interface Props {
  modelValue: string
  disabled?: boolean
}

interface Emits {
  (e: 'update:modelValue', value: string): void
  (e: 'submit'): void
}

const props = withDefaults(defineProps<Props>(), {
  disabled: false
})

const emit = defineEmits<Emits>()
const { t } = useI18n()
</script>
```

## CRUD Screen Patterns (DUAL ARCHITECTURE)

### Pattern 1: Grid-Based Layout (Card-Based Features)
For features with card-based interfaces:

```vue
<template>
  <div class="main-container">
    <!-- TitleBar com título e botão de ação -->
    <TitleBar :title="t('usersPage.users')" :actions="titleBarActions" />

    <!-- Campo de busca -->
    <div class="flex gap-base w-[100%] justify-between items-center mb-base">
      <BInput 
        type="search" 
        size="lg" 
        :placeholder="t('search')" 
        v-model="searchQuery"
        @input="handleSearchChange" 
      />
    </div>

    <div class="flex flex-col gap-base mt-base">
          <!-- Grid de Cards - GENERIC PATTERN -->
    <div class="entities-grid">
        <!-- Skeleton Loading Cards - 10 items standard -->
        <template v-if="isLoading">
          <EntityCard
            v-for="index in 10"
            :key="`skeleton-${index}`"
            :loading="true"
          />
        </template>

        <!-- Actual Cards with granular loading -->
        <template v-else>
          <EntityCard
            v-for="entity in entities"
            :key="entity.id"
            :entity="entity"
            :loading="isEntityLoading(entity.id || 0)"
            @configure="handleConfigure(entity)"
            @edit="handleEdit(entity)"
            @delete="handleDeleteAction(entity)"
            @activate="handleActivate(entity)"
            @deactivate="handleDeactivate(entity)"
          />
        </template>
      </div>

      <!-- Empty State -->
      <div
        v-if="!isLoading && users.length === 0"
        class="flex flex-col items-center justify-center py-xl"
      >
        <p v-if="paginationMeta.totalItems === 0" class="text-neutral-foreground-low">
          {{ t('messages.noItemFound') }}
        </p>
        <p v-else class="text-neutral-foreground-low">
          {{ t('messages.noResultsFound') }}
        </p>
      </div>

      <!-- Paginação -->
      <div v-if="!isLoading && users.length > 0" class="flex justify-center mt-base">
        <BPagination
          :model-value="paginationMeta.currentPage"
          :length="paginationMeta.totalPages"
          @update:model-value="handlePageChange"
        />
      </div>
    </div>

    <!-- Form Component -->
    <UserForm v-model="showForm" :user="currentUser" @save="handleSave" @close="handleCloseForm" />

    <!-- Delete Confirmation Dialog -->
    <BDialog v-model="showDelete">
      <div class="flex flex-col gap-base p-base min-h-[200px] min-w-[515px]">
        <h3 class="text-lg font-bold">{{ t('usersPage.deleteUser') }}</h3>
        <p>{{ t('usersPage.deleteUserConfirm', { name: deletingUser?.name }) }}</p>
        <div class="flex justify-end gap-base">
          <BButton @click="handleCloseDeleteModal" variant="secondary">
            {{ t('cancel') }}
          </BButton>
          <BButton @click="handleDelete" color="danger">
            {{ t('delete') }}
          </BButton>
        </div>
      </div>
    </BDialog>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue'
import { useI18n } from 'vue-i18n'
import { BInput, BPagination, BDialog, BButton } from '@BRIUS/design-system'
import { TitleBar } from '@/shared/components/TitleBar.vue'
import type { TitleBarAction } from '@/shared/components/TitleBar.vue'
import UserCard from '../components/UserCard.vue'
import UserForm from '../components/UserForm.vue'
import { useUsers } from '../composables/useUsers'

const { t } = useI18n()
const { 
  users, 
  isLoading, 
  showForm, 
  showDelete,
  currentUser,
  deletingUser,
  paginationMeta,
  searchQuery,
  fetchUsers,
  handleConfigure,
  handleEdit,
  handleDeleteAction,
  handleSave,
  handleCloseForm,
  handleCloseDeleteModal,
  handleSearchChange,
  handlePageChange,
  isUserLoading
} = useUsers(t)

const titleBarActions = computed<TitleBarAction[]>(() => [
  { label: t('addUser'), action: () => handleEdit({}), variant: 'primary' }
])

onMounted(() => fetchEntities())
</script>

<style scoped>
/* Grid responsivo padrão do projeto */
.entities-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  gap: 2rem;
  width: 100%;
}

/* Breakpoints padrão do projeto */
@media (min-width: 1600px) {
  .entities-grid { grid-template-columns: repeat(5, 1fr); }
}
@media (max-width: 1599px) and (min-width: 1280px) {
  .entities-grid { grid-template-columns: repeat(4, 1fr); }
}
@media (max-width: 1279px) and (min-width: 960px) {
  .entities-grid { grid-template-columns: repeat(3, 1fr); }
}
@media (max-width: 959px) and (min-width: 640px) {
  .entities-grid { grid-template-columns: repeat(2, 1fr); }
}
@media (max-width: 639px) {
  .entities-grid { grid-template-columns: 1fr; }
}
</style>
```

### Pattern 2: Table-Based Layout (Tabular Features)
For features with tabular data:

```vue
<template>
  <div class="main-container">
    <TitleBar :title="t('entityPage.entities')" :actions="titleBarActions" />
    
    <!-- BTable pattern -->
    <b-table 
      :headers="tcolumns" 
      :items="tdata" 
      :loading="isLoading"
      v-model:page="page" 
      v-model:items-per-page="itemsPerPage"
    >
      <!-- Custom columns -->
      <template v-for="(metric, index) in tcolumns" v-slot:[metric.value]="{ item }">
        <td v-if="item && metric.value" :key="`child-${index}-${item.value}`">
          <!-- Custom column content -->
        </td>
      </template>
      
      <!-- Actions column -->
      <template #actions="{ item, index }">
        <td>
          <div class="flex justify-center gap-4">
            <b-icon name="edit" class="table-action edit" @click="onEdit(item, index)" />
            <b-icon name="delete" class="table-action delete" @click="onDelete(item)" />
          </div>
        </td>
      </template>
    </b-table>
  </div>
</template>

<style scoped>
.table-action {
  cursor: pointer;
  font-size: 1.25rem;
  transition: color 0.2s, background-color 0.2s;
  padding: 0.5rem;
  border-radius: 0.375rem;
}

.table-action:hover {
  background-color: var(--neutral-surface-hover, #f3f4f6);
}

.table-action.edit {
  color: var(--color-primary-600);
}

.table-action.delete {
  color: var(--color-danger-600);
}
</style>
```

### Form Screens - Sidebar vs Modal Patterns
#### Sidebar Form Pattern (Complex Forms)
For complex multi-step forms:

```vue
<template>
  <b-sidebar v-model="model" width="40%" @update:model-value="updateModelValue">
    <div class="form-container">
      <div class="form-header">
        <BIcon name="close" @click="closeForm" class="cursor-pointer" />
        <div class="title">{{ getFormTitle() }}</div>
        <div class="save-container">
          <b-button color="primary" :disabled="!isFormValid" @click="handleSave">
            {{ t('save') }}
          </b-button>
        </div>
      </div>
      
      <div class="form-content">
        <!-- Multi-step content -->
        <FormGenerator v-model="entityData" :keys="currentFields" />
      </div>
    </div>
  </b-sidebar>
</template>
```

#### Modal/Dialog Form Pattern (Simple Forms)
For simple CRUD forms:

```vue
<template>
  <div class="form-wrapper">
    <BInput v-model="formData.name" :label="t('name')" />
    <BInput v-model="formData.email" :label="t('email')" />
    
    <div class="form-actions">
      <BButton @click="handleSave" variant="primary">{{ t('save') }}</BButton>
      <BButton @click="handleCancel" variant="secondary">{{ t('cancel') }}</BButton>
    </div>
  </div>
</template>

<script setup lang="ts">
import { reactive } from 'vue'
import { useI18n } from 'vue-i18n'
import { BInput, BButton } from '@BRIUS/design-system'

interface Props {
  initialData?: User
}

interface Emits {
  (e: 'save', data: User): void
  (e: 'cancel'): void
}

const props = defineProps<Props>()
const emit = defineEmits<Emits>()
const { t } = useI18n()

const formData = reactive({
  name: props.initialData?.name || '',
  email: props.initialData?.email || ''
})
</script>
```

## Design System Enforcement (CRITICAL)

### MANDATORY Imports (REAL PROJECT)
```typescript
// Core UI components (MANDATORY)
import { 
  BButton, BInput, BCard, BModal, BTable, BSelect, BSpinner,
  BPagination, BDialog, BCheckbox, BTag, BIcon, BDivider
} from '@BRIUS/design-system'

// Additional components for specific features
import { 
  BSidebar,  // For forms (IntegrationForm pattern)
  BIcon      // Material Design icons (edit, delete, more_vert, etc.)
} from '@BRIUS/design-system'

// FORBIDDEN - Any other UI library
// import { Button } from 'vuetify'     ❌
// import CustomButton from './Custom'  ❌
```

### MANDATORY Classes (REAL PROJECT)
```vue
<template>
  <!-- DUAL ARCHITECTURE PATTERNS -->
  
  <!-- Pattern 1: Grid-based layouts (Card-based features) -->
  <div class="main-container">
    <div class="entities-grid">        <!-- Generic grid class -->
      <div class="entity-card">        <!-- Fixed size: 266x237px -->
        
  <!-- Pattern 2: Table-based layouts (Tabular features) -->
  <div class="main-container">
    <b-table class="entities-table">    <!-- BTable instead of grid -->
      <template #actions>
        <b-icon class="table-action edit">   <!-- Table actions -->
        <b-icon class="table-action delete">
      </template>
    </b-table>
    
  <!-- Common classes -->
  <div class="loading-container">       <!-- Loading states -->
  <div class="empty-state">            <!-- Empty states -->
  <div class="loading-spinner">        <!-- Custom spinner -->
```

## State Management Patterns (REAL PROJECT)

### Multi-Level Loading States
```typescript
// Global loading
const isLoading = ref(false)
const isSaving = ref(false)

// Granular loading per item (REAL PROJECT PATTERN)
const loadingIntegrations = ref<Set<number>>(new Set())
const isIntegrationLoading = (integrationId: number) => {
  return loadingIntegrations.value.has(integrationId)
}

// Complex operation states
const isCheckingUsage = ref(false)
const isDeletingIntegration = ref(false)
const isDeactivatingIntegration = ref(false)
```

### Complex Dialog States (REAL PROJECT)
```vue
<template>
  <BDialog v-model="showDelete">
    <!-- Loading state for checking usage -->
    <div v-if="isCheckingUsage" class="flex flex-col gap-4 items-center justify-center py-8">
      <div class="loading-spinner"></div>
    </div>

    <!-- Warning with affected items -->
    <div v-else-if="usageCheckResult && usageCheckResult.isUsedInRelations">
      <h3>{{ t('deleteEntityWithName', { name: deletingEntity?.name }) }}</h3>
      <p>{{ t('entityUsedInCount', { count: usageCheckResult.affectedItems.length }) }}</p>
      
      <!-- Grey container with affected items -->
      <div class="related-items-container">
        <h4 class="related-items-title">{{ t('relatedItemsTitle') }}</h4>
        <ul class="related-items-list">
          <li v-for="item in usageCheckResult.affectedItems" :key="item.id">
            • {{ item.name }}
          </li>
        </ul>
      </div>
    </div>

    <!-- Simple confirmation -->
    <div v-else-if="usageCheckResult && !usageCheckResult.isUsedInRelations">
      <h3>{{ t('deleteEntity') }}</h3>
      <p>{{ t('deleteEntityMessage', { name: deletingEntity?.name }) }}</p>
    </div>
  </BDialog>
</template>

<style scoped>
.loading-spinner {
  width: 48px;
  height: 48px;
  border: 6px solid #e5e7eb;
  border-top: 6px solid rgba(255, 255, 255, 0.6);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.related-items-container {
  background-color: #f8f9fa !important;
  padding: 16px !important;
  border-radius: 8px !important;
  border: 1px solid #e9ecef !important;
}
</style>
```

### CRUD State Pattern (REAL PROJECT)
```typescript
// Multiple composables pattern
const { entities, isLoading, paginationMeta, fetchEntitiesPaginated } = useCreateTable()
const { 
  createEntity, 
  updateEntity, 
  deleteEntity,
  checkEntityUsage  // Complex validation
} = useEntityManager(t)

// Form states
const showForm = ref(false)
const showDelete = ref(false)
const showDeactivate = ref(false)  // Additional states
const currentEntity = ref<Entity>({})
const deletingEntity = ref<Entity | null>(null)
const usageCheckResult = ref<any>(null)  // Complex validation results
```

## Internationalization (MANDATORY)

### Text Pattern
```vue
<template>
  <!-- CORRECT -->
  <BButton>{{ t('buttons.save') }}</BButton>
  <p>{{ t('messages.welcome', { name: userName }) }}</p>
  
  <!-- FORBIDDEN -->
  <!-- <BButton>Save</BButton>           ❌ -->
  <!-- <p>Welcome, {{ userName }}!</p>   ❌ -->
</template>
```

## Props and Emits Typing

### Standard Pattern
```typescript
interface Props {
  modelValue?: string
  disabled?: boolean
  required?: boolean
}

interface Emits {
  (e: 'update:modelValue', value: string): void
  (e: 'change', value: string): void
}

const props = withDefaults(defineProps<Props>(), {
  disabled: false,
  required: false
})

const emit = defineEmits<Emits>()
```

## Validation Rules

### FAIL CONDITIONS (REAL PROJECT)
- Missing TitleBar in [Entity]View.vue screens
- Using components outside @BRIUS/design-system
- Hardcoded text without t() function
- Missing .main-container in list screens
- Wrong architecture: Grid for tabular data or Table for card data
- Using Options API instead of Composition API
- Missing Material Design icons (edit, delete, more_vert)
- Dialog buttons not right-aligned
- Delete button not using color="danger"

### QUALITY REQUIREMENTS (REAL PROJECT)
- Dual architecture: Grid-based OR Table-based patterns
- Granular loading states per item when applicable
- Complex dialog states with usage validation
- Responsive grid with project-specific breakpoints
- Material Design icons with project-specific classes
- Fixed card dimensions: 266x237px for entity cards
- Custom spinner with project-specific animation
- Usage checking before destructive operations

### CRITICAL PROJECT PATTERNS
- TitleBar actions use color="primary" not variant="primary"
- Delete confirmations always check usage first
- Loading states: global + granular + operation-specific
- Grid layouts: auto-fit minmax(350px, 1fr) with 5-4-3-2-1 responsive
- Sidebar forms: 40% width for complex multi-step forms
- Dialog sizes: min-w-[515px] min-h-[200px] for confirmations
