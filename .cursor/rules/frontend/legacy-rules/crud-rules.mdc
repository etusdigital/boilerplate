---
description: 
globs: 
alwaysApply: false
---

# CRUD Screens Standards - Boilerplate

## 1. File Naming Convention
- **List screens**: `[Entity]View.vue` (e.g., `UsersView.vue`, `AccountsView.vue`)
- **Form screens**: `[Entity]Form.vue` (e.g., `UserForm.vue`, `AccountForm.vue`)
- **List screens represent the "R" (Read) operation of CRUD**
- **Form screens handle "C" (Create) and "U" (Update) operations**

## 2. TitleBar Component Usage
- **ALWAYS** use `TitleBar` component in `[Entity]View.vue` screens
- **Location**: `@/shared/components/TitleBar.vue`
- **Purpose**: Standardized title and action buttons across all list screens
- **Required imports**: `TitleBar` component and `TitleBarAction` type

## 3. CRUD Flow Pattern
- **List Screen** (`[Entity]View.vue`): Displays data table with TitleBar
- **Create Button**: Located in TitleBar, triggers form screen for new entity creation
- **Form Screen** (`[Entity]Form.vue`): Handles both create and edit operations
- **Edit Action**: Table row action that opens form screen with existing data
- **Delete Action**: Table row action with confirmation dialog

## 4. Component Structure
- **Main container**: Use `main-container` class with standard padding
- **TitleBar**: Title on left, action buttons on right
- **Data table**: Below TitleBar for entity listing
- **Form components**: Conditional rendering based on state
- **Delete dialogs**: Confirmation modals for destructive actions

## 5. State Management Pattern
- **Loading states**: `isLoading`, `isSaving`
- **Form states**: `showForm`, `showFormControl`, `showDelete`
- **Data states**: Entity arrays, editing/deleting objects, indexes
- **Pagination**: `page`, `itemsPerPage` with default 100 items per page

## 6. Action Naming Convention
- **Create**: `create[Entity]()` (e.g., `createUser()`)
- **Edit**: `onEdit()` or `handleEdit()`
- **Delete**: `onDelete()` or `handleDelete()`
- **Save**: `onSave()` or `handleSave()`
- **Fetch**: `fetch[Entities]()` (e.g., `fetchUsers()`)

## 7. Internationalization
- **ALWAYS** use `t()` function for all user-facing text
- **Title keys**: `t('users')`, `t('accounts')`, `t('domains')`
- **Action keys**: `t('addUser')`, `t('edit')`, `t('delete')`, `t('save')`
- **Message keys**: `t('messages.deleteConfirm')`, `t('messages.saveSuccess')`

## 8. TypeScript Requirements
- **Import required types** for entities and components
- **Use computed()** for reactive TitleBar actions
- **Type all props, emits, and reactive references**
- **Entity interfaces** should be imported from respective type files

## 9. Lifecycle Management
- **onMounted()**: Trigger initial data fetch
- **Form reset**: Implement proper cleanup when closing forms
- **State cleanup**: Reset editing states after operations

## 10. Integration Points
- **Composables**: Use feature-specific composables for API calls
- **Components**: Reuse shared components (TitleBar, dialogs, forms)
- **Routing**: Follow Vue Router patterns for navigation
- **Error handling**: Implement consistent error messaging

---

**Reference implementation**: `apps/frontend/src/features/accounts/views/AccountsView.vue`
